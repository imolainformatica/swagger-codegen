package {{package}};

{{#imports}}import {{import}};
{{/imports}}
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.Message;

import javax.validation.*;
import javax.validation.constraints.*;
import javax.validation.Valid;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import java.util.Iterator;
import java.util.Set;
import java.util.List;

public class {{classname}}Validator implements Processor {

    private final String operation;

    public {{classname}}Validator (String operation) {
        this.operation = operation;
    }

    @Override
    public void process(Exchange exchange) throws Exception {
        final Message in = exchange.getIn();
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        {{#operations}}{{#operation}}
        if (this.operation.equals("{{nickname}}")) {
{{>paramsValidator}}
        }
        {{/operation}}{{/operations}}
    }

    class {{classname}}ValidationRequest {
{{#operations}}{{#operation}}{{>paramsRequestValidator}}{{/operation}}{{/operations}}
    }

    class {{classname}}Constraint<T> {
        private void checkConstraint(Set<ConstraintViolation<T>> violations) throws ConstraintViolationException {
            Iterator<ConstraintViolation<T>> iterator = violations.iterator();
            if (iterator.hasNext()) {
                ConstraintViolation<T> violation = iterator.next();
                throw new ConstraintViolationException(violation.getPropertyPath() + " " + violation.getMessage(), violations);
            }
        }
    }

}
